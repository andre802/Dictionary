{"version":3,"sources":["Word.js","App.js","reportWebVitals.js","index.js"],"names":["Word","etymology","phoneticSpelling","senses","word","pronunciation","entries","allEntries","relevantEntries","Object","keys","filter","el","i","length","console","log","className","id","controls","src","map","entryKey","sense","undefined","ex","toUpperCase","slice","subsense","App","useState","entry","setEntry","setWord","getData","e","preventDefault","document","getElementById","value","fetch","then","resp","json","data","onSubmit","type","onClick","hasOwnProperty","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5ce2e112.chunk.js","sourcesContent":["\r\n\r\nconst Word = ({ etymology, phoneticSpelling, senses, word, pronunciation }) => {\r\n    let entries = {};\r\n    let allEntries = {};\r\n    let relevantEntries = Object.keys(senses).filter(el => el !== \"about\");\r\n    for (let i = 0; i < relevantEntries.length; i++) {\r\n        allEntries[i] = {\r\n            \"about\": \"\"\r\n        };\r\n\r\n        allEntries[i] = senses[relevantEntries[i]];\r\n\r\n    }\r\n    entries = allEntries;\r\n    console.log(`Entries:`)\r\n    console.log(entries);\r\n    // eslint-disable-next-line\r\n\r\n    if (!word) return null;\r\n    return (\r\n        <div key={word} className=\"entry\">\r\n            <div id=\"about\">\r\n                <h1>{word}</h1>\r\n                <p>Etymology: {etymology}</p>\r\n                <p>Phonetic Spelling: {phoneticSpelling}</p>\r\n                <audio\r\n                    controls\r\n                    src={pronunciation}\r\n                ></audio>\r\n            </div>\r\n            {Object.keys(entries).length !== 0 ? Object.keys(entries).map(entryKey => (\r\n                <div className=\"sense\">\r\n                    <p>{entries[entryKey][\"category\"]}</p>\r\n                    {entries[entryKey][\"senses\"].map(sense => (\r\n                        <>\r\n                        <div className=\"definition\">\r\n                            <h3>Definition</h3>\r\n                            <p>{sense[\"definitions\"]}</p>\r\n                        </div>\r\n                        {sense[\"examples\"] !== undefined ? (\r\n                            <div className=\"examples\">\r\n                                <h4>Examples</h4>\r\n                                {sense[\"examples\"].map(ex => {\r\n                                    ex = ex[0].toUpperCase() + ex.slice(1,);\r\n                                    return <p>{ex}</p>\r\n                                })}\r\n                            </div>\r\n                        ) : \"\"}\r\n                        {sense[\"subsenses\"] !== undefined ? (\r\n                            sense[\"subsenses\"].map(subsense => (\r\n                                <div className=\"subsense\">\r\n                                    <h4>Subsense</h4>\r\n                                    <h5>Definition</h5>\r\n                                    <p>{subsense[\"definition\"]}</p>\r\n                                    {subsense[\"examples\"] ? (\r\n                                        <div>\r\n                                            <h5>Example</h5>\r\n                                            {subsense[\"examples\"].map(ex => {\r\n                                                ex = ex[0].toUpperCase() + ex.slice(1,);\r\n                                                return <p>{ex}</p>\r\n                                            })}\r\n                                        </div>) : \"\"}\r\n                                </div>\r\n                             ))) : \"\"}</>))}\r\n                            </div>)) : \"\"}\r\n                        </div>\r\n    )}\r\n        \r\n\r\nexport default Word;","import {useState } from \"react\";\r\nimport Word from './Word';\r\nfunction App() {\r\n  const [entry, setEntry] = useState({});\r\n  const [word, setWord] = useState(\"\");\r\n  console.log(entry);\r\n  function getData (e)  {\r\n    e.preventDefault();\r\n    console.log(\"click\");\r\n    if (document.getElementById(\"word\").value === \"\") return;\r\n    setWord(document.getElementById(\"word\").value);\r\n    fetch(`http://localhost:3000/search?word=${document.getElementById(\"word\").value}`)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        setEntry(data);\r\n      })\r\n  }\r\n  return (\r\n    <>\r\n    <header>\r\n      <h1>Dictionary</h1>\r\n    </header>\r\n    <div>\r\n      <form onSubmit={e => getData(e)}>\r\n      <label>Word <input\r\n        type=\"text\"\r\n        id=\"word\"\r\n      \r\n      />\r\n        <button\r\n          type=\"button\"\r\n          onClick={e => {getData(e)}}\r\n        >Submit</button>\r\n      </label>\r\n      </form>\r\n      <div>\r\n        {entry.hasOwnProperty(\"about\") ? (\r\n          <Word\r\n            word={word}\r\n            etymology={entry[\"about\"][\"etymology\"]}\r\n            phoneticSpelling={entry[\"about\"][\"phonetic spelling\"]}\r\n            senses={entry}\r\n            pronunciation={entry[\"about\"][\"pronunciations\"]}\r\n          />) : \"\"}\r\n      </div>\r\n    </div>\r\n  </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}